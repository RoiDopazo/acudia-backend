service: acudia-backend

package:
  excludeDevDependencies: true
  individually: true
  exclude:
    - node_modules/**
    - tmp/**
    - .git/**
    - dynamodb_local_data/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}

plugins:
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-offline

custom:
  accountId: ${env:AWS_ACCOUNT_ID}
  region: ${env:REGION}

  dynamodb:
    stages:
      - local
    start:
      port: ${env:DB_PORT}
      dbPath: 'dynamodb_local_data'
      inMemory: false
      migrate: false

  appSync: # appsync plugin configuration
    name: acudia-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${env:REGION}
      defaultAction: ALLOW
      userPoolId: ${env:AWS_USER_POOL_ID}
    dataSources: ${file(resources/data-sources.yml)}
    mappingTemplates: ${file(resources/resolvers.yml)}
    schema: schema.graphql

  appsync-offline: # appsync-offline configuration
    port: ${env:PORT}
    dynamodb:
      client:
        endpoint: ${env:DB_HOST}
        region: localhost

# Function to integrate hosp data (Unccomment if you want to store it in the db)

# functions:
#   hospIntegration:
#     handler: lambdas/hosp-data-integration.job
#     description: Function to parse hospital data and store in the db
#     iamRoleStatements:
#       - Effect: 'Allow'
#         Action: dynamodb:BatchWriteItem
#         Resource: arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/Hospitals
#       - Effect: 'Allow'
#         Action: s3:getObject
#         Resource: arn:aws:s3:::acudia-dev-data-bucket/*

resources:
  - ${file(resources/dynamodb-tables.yml)}
