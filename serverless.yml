service: acudia-backend

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-offline

custom:
  accountId: ${env:AWS_ACCOUNT_ID}
  region: ${env:REGION}

  dynamodb:
    stages:
      - local
    start:
      port: ${env:DB_PORT}
      dbPath: 'dynamodb_local_data'
      inMemory: false
      migrate: false

  appSync: # appsync plugin configuration
    name: acudia-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${env:REGION}
      defaultAction: ALLOW
      userPoolId: ${env:AWS_USER_POOL_ID}
    dataSources: ${file(resources/data-sources.yml)}
    mappingTemplates: ${file(resources/resolvers.yml)}
    schema: schema.graphql

  appsync-offline: # appsync-offline configuration
    port: ${env:PORT}
    dynamodb:
      client:
        endpoint: ${env:DB_HOST}
        region: localhost

functions:
  hospIntegration:
    handler: lambdas/hosp-data-integration.job
    description: Function to parse hospital data and store in the db
    iamRoleStatements:
      - Effect: 'Allow'
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/AcudiaTable

resources:
  - ${file(resources/dynamodb-tables.yml)}
