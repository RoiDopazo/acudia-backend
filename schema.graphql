# Entities
type Client {
  PK: String!
  SK: String!
  name: String!
  secondName: String!
  email: String!
  photoUrl: String
  createdAt: Float
  updatedAt: Float
  deletedAt: Float
}

type Acudier {
  PK: String!
  SK: String!
  name: String
  secondName: String
  email: String
  genre: String
  birthDate: AWSDate
  photoUrl: String
  createdAt: Float
  updatedAt: Float
  deletedAt: Float
}

type AssignemntItem {
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  fare: Float
  days: [Boolean]
}

type Assignemnt {
  PK: String!
  SK: String!
  hospId: String!
  hospName: String
  hospProvince: String
  itemList: [AssignemntItem]
  createdAt: Float
  updatedAt: Float
}

type AssignemntList {
  items: [Assignemnt]
}

# Inputs
input CreateClientInput {
  name: String!
  secondName: String!
  email: String!
  photoUrl: String
}

input CreateAcudierInput {
  name: String!
  secondName: String!
  email: String!
  genre: String!
  birthDate: AWSDate!
  photoUrl: String
}

input CreateAssignmentItemInput {
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  fare: Float
  days: [Boolean]
}

input CreateAssignmentInput {
  hospId: String!
  email: String
  hospName: String
  hospProvince: String
  itemList: [CreateAssignmentItemInput]
}

input QueryClientInput {
  id: String!
}

input QueryAcudierInput {
  id: String!
}

input UpdateAssignmentInput {
  hospId: String!
  itemList: [CreateAssignmentItemInput]
}

# Define the queries
type Query {
  getClientByID(input: QueryClientInput): Client
  getAcudierByID(input: QueryAcudierInput): Acudier
  getMyAssignments: AssignemntList
}

# Define the mutations
type Mutation {
  createClient(input: CreateClientInput): Client
  createAcudier(input: CreateAcudierInput): Acudier
  addAssignment(input: CreateAssignmentInput): Assignemnt
  updateAssignment(input: UpdateAssignmentInput): Boolean
}

# Define the schema
schema {
  query: Query
  mutation: Mutation
}
