type Profile {
  PK: String!
  SK: String!
  name: String
  secondName: String
  email: String
  genre: String
  birthDate: AWSDate
  photoUrl: String
  jobsCompleted: Float
  popularity: Float
  createdAt: Float
  updatedAt: Float
  deletedAt: Float
}

type Assignment {
  PK: String!
  SK: String!
  acudierId: String!
  hospId: String!
  hospName: String
  hospProvince: String
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  fare: Float
  days: [Boolean]
  createdAt: Float
  updatedAt: Float
}

type Comment {
  PK: String!
  SK: String!
  author: String!
  comment: String!
  date: AWSDate
  rating: Float!
}

type Request {
  PK: String!
  SK: String!
  status: String!
  acudier: String!
  acudierName: String!
  acudierPhoto: String
  client: String!
  clientName: String!
  clientPhoto: String
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  price: Float
  createdAt: Float
  updatedAt: Float
}

type LastEvaluatedKey {
  PK: String
  SK: String
}

type Pagination {
  lastEvaluatedKey: LastEvaluatedKey
  count: Int
}

# Inputs
input CreateClientInput {
  name: String!
  secondName: String!
  email: String!
  photoUrl: String
}

input CreateAcudierInput {
  name: String!
  secondName: String!
  email: String!
  genre: String!
  birthDate: AWSDate!
  photoUrl: String
}

input AssignmentInput {
  hospName: String
  hospProvince: String
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  fare: Float
  days: [Boolean]
}

input CreateAssignmentInput {
  hospId: String!
  data: AssignmentInput
}

input UpdateAssignmentInput {
  hospId: String!
  assignmentId: String!
  data: AssignmentInput
}

input RemoveAssignmentInput {
  hospId: String!
  assignmentId: String!
}

input QueryClientInput {
  id: String!
}

input QueryAcudierInput {
  id: String!
}

input GetProfileInput {
  role: String!
}

input SearchAssignmentsInputQuery {
  from: AWSDate
  to: AWSDate
  startHour: Float
  endHour: Float
  minFare: Float
  maxFare: Float
}

input SearchAssignmentsInput {
  hospId: String!
  query: SearchAssignmentsInputQuery
}

#Outputs
type AssignmentListResponse {
  items: [Assignment]
}

type SearchAssignmentResponseList {
  items: [SearchAssignmentResponse]
  pagination: Pagination
}

type SearchAssignmentAcudierResponse {
  profile: Profile
  comments: [Comment]
}

type SearchAssignmentResponse {
  acudier: SearchAssignmentAcudierResponse
  assignment: [Assignment]
}

input QueryAcudierRequestsInput {
  acudier: String!
  status: String
}

type AcudierAvailabilityResponse {
  items: [Request]
}

# Define the queries
type Query {
  getProfile(input: GetProfileInput): Profile
  getClientByID(input: QueryClientInput): Profile
  getAcudierByID(input: QueryAcudierInput): Profile
  searchAssignments(input: SearchAssignmentsInput): SearchAssignmentResponseList
  getMyAssignments: AssignmentListResponse
  getAcudierRequests(input: QueryAcudierRequestsInput): AcudierAvailabilityResponse
}

# Define the mutations
type Mutation {
  createClient(input: CreateClientInput): Profile
  createAcudier(input: CreateAcudierInput): Profile
  addAssignment(input: CreateAssignmentInput): Assignment
  updateAssignment(input: UpdateAssignmentInput): Boolean
  removeAssignment(input: RemoveAssignmentInput): Boolean
}

# Define the schema
schema {
  query: Query
  mutation: Mutation
}
